$SevOne = $null

function __TestSevOneConnection__
{
$SevOne.GetType().fullname -like 'Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.WebServiceProxy*.SevOneApiService'
}

Function __fromUNIXTime__
{
Param
  (
    [Parameter(Mandatory=$true,
    Position=0,
    ValueFromPipeline=$true)]
    [int]$inputobject
  )
Process
  {
    [datetime]$origin = '1970-01-01 00:00:00'
    $origin.AddSeconds($inputobject)
  }
}

function Connect-SevOne
{
<#
  .Synopsis
     Create a connection to a SevOne Instance 
  .DESCRIPTION
     Creates a SOAP API connection to the specified SevOne Management instance
  .EXAMPLE
     Connect-SevOne -ComputerName 192.168.0.10 -credential (get-credential)

     Establishes a new connection to the SevOne Management server at 192.168.0.10
#>
  [CmdletBinding()]
  param
  (
    # Set the Computername or IP address of the SevOneinstance you wish to connect to
    [Parameter(Mandatory,
    Position=0,
    ParameterSetName='Default')]
    [string]
    $ComputerName,
    
    # Specify the Credentials for the SevOne Connection
    [Parameter(Mandatory,
    Position=1,
    ParameterSetName='Default')]
    [PSCredential]
    $Credential,

    # Set this option if you are connecting via SSL
    [Parameter(ParameterSetName='Default')]
    [switch]$UseSSL
  )
Write-Debug 'starting connection process'
if ($UseSSL) { $SoapUrl = "https://$ComputerName/soap3/api.wsdl" }
else { $SoapUrl = "http://$ComputerName/soap3/api.wsdl" }
Write-Debug 'URL is complete and stored in $SoapURL'
Write-Verbose "Beginning connection to $SoapUrl"
$Client = try {New-WebServiceProxy -Uri $SoapUrl -ErrorAction Stop} 
catch {throw "unable to reach the SevOne Appliance @ $SoapUrl"}
Write-Debug 'WebConnection stored in $Client'
$Client.CookieContainer = New-Object System.Net.CookieContainer
try {$null = $Client.authenticate($Credential.UserName, $Credential.GetNetworkCredential().Password)} catch {Throw 'Unable to authenticate with the SevOne Appliance'}
$Global:SevOne = $Client
Write-Verbose 'Successfully connected to SevOne Appliance'
}

function Get-SevOneDevice # looking pretty good, still need to test if the API call fails --- issue, device by ID is failing with the ID porperty
{
<#
  .SYNOPSIS
    Gathers SevOne devices

  .DESCRIPTION
    Gather one or more SevOne devices from the SevOne API

  .EXAMPLE
    Get-SevOneDevice

    Gathers all SevOne devices

  .EXAMPLE
#>
[cmdletbinding(DefaultParameterSetName='default')]
param
  (
    #
    [parameter(Mandatory,
    ParameterSetName='Name',
    ValueFromPipelineByPropertyName)]
    [string]$Name,
    
    #
    [parameter(Mandatory,
    ParameterSetName='ID',
    ValueFromPipelineByPropertyName)]
    [int]$ID,
    
    #
    [parameter(Mandatory,
    ParameterSetName='IPAddress',
    ValueFromPipelineByPropertyName)]
    [IPAddress]$IPAddress
  )
begin {
    if (-not (__TestSevOneConnection__)) {
        throw 'Not connected to a SevOne instance'
      }
  }
process {
    switch ($PSCmdlet.ParameterSetName)
      {
        'default' { $SevOne.core_getDevices() ; continue}
        'Name' { $SevOne.core_getDeviceByName($Name) ; continue}
        'ID' { $SevOne.core_getDeviceById($ID) ; continue}
        'IPAddress' { $SevOne.core_getDeviceById(($SevOne.core_getDeviceIdByIp($IPAddress.IPAddressToString))) ; continue }
      }
    
  }
}

function Get-SevOneAlert
{
<##>
[cmdletbinding(DefaultParameterSetName='default')]
param
  (
    # The Device that will be associated with Alarms pulled
    [parameter(Mandatory,
    Position=0,
    ValueFromPipelineByPropertyName,
    ValueFromPipeline,
    ParameterSetName='Device')]
    [PSObject]$Device,

    # The time to start pulling alerts
    [parameter(ParameterSetName='Device')]
    [parameter(ParameterSetName='Default')]    
    [datetime]$StartTime
  )
begin {
    if (-not (__TestSevOneConnection__)) {
        throw 'Not connected to a SevOne instance'
      }
  }
process 
  {
    switch ($PSCmdlet.ParameterSetName)
      {
        'default' {
            foreach ($a in $SevOne.alert_getAlerts(0))
              {
                $a.startTime = $a.startTime | __fromUNIXTime__
                $a.endTime = $a.endTime | __fromUNIXTime__
                if ($StartTime)
                  {
                    if ($a.startTime -ge $StartTime)
                      {$a}
                  }
                else {$a}
              }
          }
        'device' {
            foreach ($a in $SevOne.alert_getAlertsByDeviceId($Device.id))
              {
                $a.startTime = $a.startTime | __fromUNIXTime__
                $a.endTime = $a.endTime | __fromUNIXTime__
                if ($StartTime)
                  {
                    if ($a.startTime -ge $StartTime)
                      {$a}
                  }
                else {$a}
              }
          }
      }
  }
end {}
}

function Close-SevOneAlert
{
<##>
[cmdletbinding()]
param 
  (
    [Parameter(Mandatory,
    position=0,
    ValueFromPipeline,
    ValueFromPipelineByPropertyName)]
    $Alert
  )
begin {
    if (-not (__TestSevOneConnection__)) {
        throw 'Not connected to a SevOne instance'
      }
  }
process{
    $SevOne.alert_clearByAlertId($Alert.ID)
  }
end {}
}

function New-SevOneDevice {}

function Set-SevOneDevice {}

function Remove-SevOneDevice {}

Export-ModuleMember -Function *-* 